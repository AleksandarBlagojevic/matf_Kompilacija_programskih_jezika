%{
  #include <iostream>
  #include <cstdlib>
  #include <string>
  #include <map>
  
  using namespace std;
  
  #define YYDEBUG 1
  
  #include "regex.hpp"
  
  void yyerror(string s){
    cerr << s << endl;
    exit(EXIT_FAILURE);
   }
   
   extern int yylex();
   
   map<char,RegEx*> tablica;

%}

%union{
  int d;
  char c;
  RegEx *r;
  KarakterskaKlasa *k;
}

%token basic_token definition_token maxlen_token
%token <c> slovo_token id_token
%token <d> num_token

%type <k> NizSlova
%type <r> Izraz

%left '|'
%left '.'
%left '*' '+' '?' '{'



%%

Program: Program Naredba '\n'
	| Naredba '\n'
	;
  
Naredba: Izraz
        {
            cout << "Izraz je prepoznat!" << endl;
            $1->ispisi();
            cout << endl;
            delete $1;
        }
	| basic_token Izraz
		{	
			$2->basic();
			cout << endl;
			/*
			RegEx *r = $2->basic();
			r->ispisi();
			cout << endl;
			delete r;
			*/
		}
	| definition_token NizDeklarisanihIzraza
	| maxlen_token Izraz
		{
			int m = $2->maxlen();
			if(m<0)
				cout << "+Inf" << endl;
			 else
				cout << m << endl;
		}
	|
	;
	
NizDeklarisanihIzraza: NizDeklarisanihIzraza ',' id_token '=' Izraz
			{
			map<char,RegEx*>::iterator i = tablica.find($3);
			if(i!=tablica.end())
				delete i->second;
			tablica[$3]=$5;
		}
	| id_token '=' Izraz
		{
			map<char,RegEx*>::iterator i = tablica.find($1);
			if(i!=tablica.end())
				delete i->second;
			tablica[$1]=$3;
		}
	;
	
Izraz: Izraz '|' Izraz
		{	$$ = new Ili($1,$3);	}
	| Izraz '.' Izraz
		{	$$ = new Nadovezivanje($1,$3);	}
	| Izraz '*'
		{	$$ = new Zvezdica($1);	}
	| Izraz '+'
		{	$$ = new Plus($1);	}
	| Izraz '?'
		{	$$ = new Upitnik($1);	}
	| Izraz '{' num_token '}'
		{	$$ = new TacnoN($1,$3);	}
	| '(' Izraz ')'
		{	$$ = $2;	}
	| '[' NizSlova ']'
		{	$$ = $2;	}
	| slovo_token
		{	$$ = new Slovo($1);	}
	| id_token
		{	
			map<char,RegEx*>::iterator i = tablica.find($1);
			if(i==tablica.end())
				yyerror("Promenljiva nije deklarisana!");
			$$ = i->second;
		}
	;
NizSlova: NizSlova slovo_token
		{
			$$ = $1;
			$$->dodajSlovo($2);
		}
	| slovo_token
		{
			$$ = new KarakterskaKlasa();
			$$->dodajSlovo($1);
		}
	;
	
%%

int main(){
  //yydebug = 1;
  yyparse();
  exit(EXIT_SUCCESS);
 }
